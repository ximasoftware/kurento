name: "server deploy docker (child)"

on:
  # Triggered from other workflows.
  workflow_call:
    inputs:
      jobDistros:
        description: "jobDistros: List of Ubuntu codenames to build for"
        required: true
        # There is no `list` type, so use a raw JSON array and `fromJSON()`.
        # Example: '["xenial", "bionic", "focal"]'
        type: "string"
        default: '["noble"]'
      jobRelease:
        description: "jobRelease: Enable to build release versions; disable for development builds"
        required: false
        type: "boolean"
        default: false
      jobDeployName:
        description: "jobDeployName: Custom name given to the deployment"
        required: false
        type: "string"
        default: ""
      buildAsan:
        description: "buildAsan: Whether to also build an image with AddressSanitizer"
        required: false
        type: "boolean"
        default: false
      runnerGroup:
        description: "runnerGroup: Set of runners where the workflow jobs should be run"
        required: false
        type: "string"
        default: ""
    secrets:
      KURENTO_DOCKERHUB_USERNAME:
        description: "Docker Hub username for pushing images"
        required: true
      KURENTO_DOCKERHUB_TOKEN:
        description: "Docker Hub auth token for pushing images"
        required: true

defaults:
  run:
    shell: "bash --noprofile --norc -o errexit -o errtrace -o pipefail -o nounset -o xtrace {0}"

jobs:
  build:
    runs-on: ["self-hosted", "${{ inputs.runnerGroup }}"]
    strategy:
      # Run each configuration sequentially.
      # Docker login & build fails if ran multiple times in parallel.
      max-parallel: 1
      matrix:
        # Select only the *first* distro to use as base for Docker images.
        # The point of Docker is to abstract the base system, so there is no
        # need to publish Docker images with different versions of Ubuntu.
        jobDistro: [ "${{ fromJSON(inputs.jobDistros)[0] }}" ]
    timeout-minutes: 30
    steps:
      # Action: https://github.com/actions/checkout
      - name: "Checkout"
        uses: "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11" # v4.1.1

      - name: "Configure the environment for ci-scripts/"
        working-directory: "ci-scripts/"
        run: |
          echo "$PWD" >>$GITHUB_PATH
          echo "KURENTO_SCRIPTS_HOME=$PWD" >>$GITHUB_ENV
          echo "JOB_TIMESTAMP=$(date --utc +%Y%m%d%H%M%S)" >>$GITHUB_ENV

      # Action: https://github.com/actions/download-artifact
      - name: "Copy artifacts from previous jobs"
        id: "copy-artifacts"
        uses: "actions/download-artifact@v4"
        with:
          path: "artifacts/"

      - name: "Run job script"
        env:
          JOB_DISTRO: "${{ matrix.jobDistro }}"
          JOB_RELEASE: "${{ inputs.jobRelease }}"
          JOB_DEPLOY_NAME: "${{ inputs.jobDeployName }}"
          PACKAGES_PATH: "${{ steps.copy-artifacts.outputs.download-path }}"
          KURENTO_DOCKERHUB_USERNAME: "${{ secrets.KURENTO_DOCKERHUB_USERNAME }}"
          KURENTO_DOCKERHUB_TOKEN: "${{ secrets.KURENTO_DOCKERHUB_TOKEN }}"
        working-directory: "docker/kurento-media-server/"
        run: "ci_job_deploy_docker.sh"

      - name: "Run job script (modules extras)"
        env:
          JOB_DISTRO: "${{ matrix.jobDistro }}"
          JOB_RELEASE: "${{ inputs.jobRelease }}"
          JOB_DEPLOY_NAME: "${{ inputs.jobDeployName }}"
          PACKAGES_PATH: "${{ steps.copy-artifacts.outputs.download-path }}"
          KURENTO_DOCKERHUB_USERNAME: "${{ secrets.KURENTO_DOCKERHUB_USERNAME }}"
          KURENTO_DOCKERHUB_TOKEN: "${{ secrets.KURENTO_DOCKERHUB_TOKEN }}"
        working-directory: "docker/kurento-media-server-extras/"
        run: "ci_job_deploy_docker.sh"

      - name: "Run job script (AddressSanitizer)"
        if: ${{ inputs.buildAsan }}
        env:
          JOB_DISTRO: "${{ matrix.jobDistro }}"
          JOB_RELEASE: "${{ inputs.jobRelease }}"
          JOB_DEPLOY_NAME: "${{ inputs.jobDeployName }}"
          PACKAGES_PATH: "${{ steps.copy-artifacts.outputs.download-path }}"
          KURENTO_DOCKERHUB_USERNAME: "${{ secrets.KURENTO_DOCKERHUB_USERNAME }}"
          KURENTO_DOCKERHUB_TOKEN: "${{ secrets.KURENTO_DOCKERHUB_TOKEN }}"
        working-directory: "docker/kurento-media-server-asan/"
        run: "ci_job_deploy_docker_asan.sh"
